// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model permissions {
  id Int @id @default(autoincrement())
  module String
  access Json
  role_id Int @unique
  role     roles  @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model roles {
  id Int @id @default(autoincrement())
  name String
  permission permissions?
  user users[]
}

model users {
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  email String
  password String
  phone String
  gender String
  date_of_birth String
  reset_token String
  verification_token String
  role_id Int
  role roles @relation(fields: [role_id], references: [id], onDelete: Cascade)
  order orders[]
  cart carts[]
  user_address user_addresses?
}

model products {
  id Int @id @default(autoincrement())
  name String
  description String
  condition String
  weight Float
  price Float
  discount_price Float
  tax_price Float
  stock_quantity Int
  category_id Int
  category categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  product_image product_images[]
  product_variant product_variants[]
  order_item order_items[]
  cart carts[]
}

model product_images {
  id Int @id @default(autoincrement())
  product_id Int @unique
  path String
  product products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model product_variants {
  id Int @id @default(autoincrement())
  name String
  product_id Int
  product products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_variant_value product_variant_values?
  order_item order_items[]
}

model product_variant_values {
  id Int @id @default(autoincrement())
  product_variant_id Int @unique
  value String
  price Float
  stock_quantity Int
  product_variant product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  order_item order_items[]
}

model orders {
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  email String
  payment_method String
  shipping_tracking_number String
  shipping_fee Float
  shipping_method_id Int
  total_tax Float
  total Float
  grand_total Float
  user_id Int
  status String
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shipping_method shipping_methods @relation(fields: [shipping_method_id], references: [id], onDelete: Cascade)
  order_item order_items[]
}

model order_items {
  id Int @id @default(autoincrement())
  price Float
  quantity Int
  product_id Int
  variant_id Int
  variant_value_id Int
  order_id Int
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_variant_value product_variant_values @relation(fields: [variant_value_id], references: [id], onDelete: Cascade)
  product_variant product_variants @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  product products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model carts {
  id Int @id @default(autoincrement())
  product_id Int
  price Float
  quantity Int
  user_id Int
  product products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model settings {
  id Int @id @default(autoincrement())
  name String
  value String
  type String
}

model shipping_methods {
  id Int @id @default(autoincrement())
  name String
  is_active String
  order orders[]
}

model categories {
  id Int @id @default(autoincrement())
  name String
  is_active String
  product products[]
}

model user_addresses {
  id Int @id @default(autoincrement())
  name String
  country String
  address String
  province String
  province_id Int
  city String
  city_id Int
  district String
  district_id Int
  sub_district String
  sub_district_id Int
  postal_code String
  user_id Int @unique
  user users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
} 

